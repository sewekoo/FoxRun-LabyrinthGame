Report 06.03.2023
- Implemented weave labyrinth generation successfully with placeholder graphics.
	- Red blocks represent walls (small gaps should be ignored. Those are due to draw order of walls and some of them being black when they are "broken" instead of invisible)
	- Black represent roads
	- Green blocks represent bridges or overpasses over a square
- There were some problems that made me change a plan a bit. For example Vectors did not obviously work because I needed mutable collections so I changed to Buffers.
- Then I couldn't implement a "Window" -class yet like I wanted, because how the JavaFX works. I will look into this further on and for now implement graphical elements in Main object.
- I think I'm pretty much on schedule. I will now begin work with game loop and adding ability to move a character in the labyrinth.
- Even though graphically my project is quite ugly, I should be able to implement game loop and work on graphics later on.
- Estimated work hours for last two weeks are around 10 hours.

Report 20.03.2023
- Fixed graphical bug that caused small unintended gaps in walls caused by broken walls not being invisible.
- Added a movable playble character. Player can be moved with WASD-keys.
- Implemented collision with player and walls.
  - When using overpasses, players movement is "locked" until player reaches other side of overpass or returns.
  - There still exists a bug where player can escape "out-of-bounds" when on top of an invisible broken wall.
  - When going under overpasses, the overpass is redrawn on top of player model.
- Added win and lose conditions
  - Random "goals" are generated at edges. When player reaches these goals a new level is generated. Goals are the "gaps" at the edges of the levels.
  - Changed drawing to a tick system to allow updating draw orders and allow multiple levels.
  - When level is beat a new level is generated
  - Player is also awarded points determined by round number and remaining time.
  - When player loses (time runs out) the game is stopped.
- Added solver algorithm. Run the algrotihm by pressing "Y"-key when level is active.
  - Follow the yellow dots to find the exit with minimum number of movements.
- "First larger whole" that have been implemented is the overall working game-loop with core logic and functions.
  - With levels generating correctly, solver working and levels being playable almost all core mechanics are complete.
  - Last core mechanic to be implemented is file I/O.
  - After that most of the work will be adding options and improving gameplay, such as adding ability to change map size, implementing view that follows player and menu other menu functions.
  - The rest of the time will be used to find and fix bugs and make game pretty.
- Biggest error fixed was the complete change in drawing style. I now use ScalaFX GraphicsContext class which seems better for constantly updating drawing that my game requires.
- As stated before largest bug to fix at the moment is to prevent player going out-of-bounds when on top of invisible walls.
- I think I'm currently in schedule. My game is somewhat "playable" which was my goal.
- Estimated working hours for past two weeks are around 15 hours.

Report 3.4.2023
- Implemented labyrinth saving and loading to .txt files
- Implemented main menu and most of the menu functions
- Implemented scoreboard with scores saving to file
- Custom levels are also loadable through main menu
- Biggest difficulties were working around ScalaFX
    - Implementing menu with different scenes was difficult since I switched to using ticks with GraphicsContext for drawing
    - However I managed to impelement both of these draw methods working together.
- My game is mostly in schedule. Only big thing that has to be implemented is the view to allow map sizes that are not limited to screen.
- I overlooked this in my schedule plan, but I left some room at the end for polishing so I should have time for implementing this functionality.
- Rest of the time will be used for polishing graphics and gameplay.
- Estimated working hours for past two weeks are around 10 hours.

Report 17.4.2023
- Reworked graphics to make game more pretty
- Impelemented animations to player character
- Switched to drawing relative to player, thus making "camera" follow player and allowing map sizes that are not limited to screen size
- Fixed bug that allowed player to go through walls when between squares
- Implemented options to main menu with functionality
- Reworked "losing" scenario to correctly show the solution before saving score
- Biggest difficuties during this work period came from switching to player centered screen
  - I had to rework the entire drawing mechanics which was quite tedious
  - However, I left the old system intact so I could use that to show the solution
- I'm pretty much in schedule as I consider my actual game done at this point.
- Last days will be used to create documentantion, comment the code better and perhaps create some tests for the project
- I'm still planning to meet the early deadline (19.4.2023) to get the extra points
- Estimated working hours for past two weeks are around 25 hours.